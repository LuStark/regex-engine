DFA表的形式：
        
          a       b       c       d       e ...         1 2 3     / ? *     /*字符直接映射*/
s1       s2      -1      -1      -1      s5      
s2       
s3
s4
s5
.
.
.                       
sn                      Accept

1.Accept用一个int（超出最大状态数）表示.
2.出错状态用-1表示

定义表 DFATable T[ MAXNUM_STATES ][ 256 ]; /*动态储存*/

T[ i ][ j ]     状态i在字符j下能到达的状态 

定义识别函数


void    makeUpTable( DFATable T[][256], DFA *dfa )
{
    int i;
    Edge    *e;
    for( i=0; i<dfa->numOfEdges; i++ )
    {
        e = dfa->edgeArray[i];
        fromID  =   e->from_Status->ID;
        toID    =   e->to_Status->ID;
        if( e->matchContent!=NULL )
        {
            /* 循环遍历matchContent每个字符然后填表 */
            for( each c in matchContent )
                T[fromID][c] = toID;
        }
        if( e->inMatchContent != NULL )
        {
            for( j=0; )
                T[fromID][c] = toID;

        }
        if( e->matchRange != NULL )
        {


        }
        if( e->inMatchRange != NULL )
        {


        }
    
    }
}


bool    
Recognition( DFATable **T, xchar_t *str )
{
    int i;
    int length = wcslen( str );
    xchar_t     c;

    i = 0;
    while( (c=(*str++)) != '\0' )
    {
        if( T[i][c] == ACCEPT )
        {
            return true;
        }else if( T[i][c] == -1 )
        {
            return false;
        }else{
            i = T[i][c];
        }
    }
    /* 须讨论str为空的情况， 其实到达此处的情况说明str为0 */
    
}

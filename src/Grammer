
regex -> pure-regex | extend-regex

-----------------------------------------------------------------------------------------------
pure-regex -> pure-regex-union
pure-regex-union -> pure-regex-link { | pure-regex-link }
pure-regex-link -> pure-regex-closure { pure-regex-closure }
pure-regex-closure -> pure-regex-top { closure_op }1    #匹配一次
pure-regex-top -> ( pure-regex ) | normal-character | escape_character | character_range

-----------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------
extend-regex -> extend-regex-union
extend-regex-union -> extend-regex-link { | extend-regex-link }
extend-regex-link -> extend-regex-closure { extend-regex-closure }
extend-regex-closure -> extend-regex-top { closure_op } 1
extend-regex-top -> ( ? re_capture ) | ( ? re_yucha )

re_yucha -> = pure-regex | < = pure-regex
re_capture -> pure-regex | # < exp_name > pure-regex




#关于First集合，上述文法规则有以下结论:

    First(regex) = First(re_union_level) = First(re_link_level)
    = First(re_closure_level) = First(re_top_level) = 
    { 不包括 $ + * ? | ) }



# 非特殊字符的文法规则 :  \+*?|[(
non-special -> 
                if c in First[non-special]
                    return c 
                else
                    return 'Error'


escape_character -> \ anychar(终结符号) 

character -> escape_character | non-special

character_range -> [ choose_or_not {range} ]  #零次或者多次

choose_or_not -> ^ | ε

range -> anychar { - anychar }1   #只匹配零次或者一次

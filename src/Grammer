
regex -> regex-union
regex-union -> regex-link { | regex-link }            #这里的中括号是指零次以上的重复
regex-link  -> regex-closure { regex-closure }        #同上

regex-closure -> regex-top | regex-top * | regex-top + | regex-top ? | 
                    regex-top { num } | regex-top { num , } | regex-top { num , num }
                                                      #这里的中括号是指本身 

regex-top -> ( regex ) | normal-character | escape-character | character_range | ( ? extend-regex )

extend-regex ->   < = regex  |  = regex  |  regex  |  # < string > regex
string  ->  [A-Za-z]+ 


normal-character -> 匹配除了 \ + * ? [ ( ) | 的任意字符
escape-character -> \ anychar

character_range ->  [ choose_or_not {range} ]       #一个可选集合里面可以包含一个到多个range
choose_or_not   ->  ^ | ε
range -> anychar { - anychar }1   #只匹配零次或者一次






#关于First集合，上述文法规则有以下结论:

    First(regex) = First(re_union_level) = First(re_link_level)
    = First(re_closure_level) = First(re_top_level) = 
    { 不包括 $ + * ? | ) }



# 非特殊字符的文法规则 :  \+*?|[(
non-special -> 
                if c in First[non-special]
                    return c 
                else
                    return 'Error'


escape_character -> \ anychar(终结符号) 

character -> escape_character | non-special

character_range -> [ choose_or_not {range} ]  #零次或者多次

choose_or_not -> ^ | ε

range -> anychar { - anychar }1   #只匹配零次或者一次
